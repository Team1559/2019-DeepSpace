/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team1559.robot.subsystems;
import org.usfirst.frc.team1559.robot.subsystems.Grabber;
import org.usfirst.frc.team1559.robot.subsystems.pixylinevector;
import org.usfirst.frc.team1559.robot.DistSensor;
import org.usfirst.frc.team1559.robot.Pixy;
import org.usfirst.frc.team1559.robot.VisionData;
import org.usfirst.frc.team1559.robot.Vision;
import org.usfirst.frc.team1559.robot.Constants;
import org.usfirst.frc.team1559.robot.Wiring;
import org.usfirst.frc.team1559.robot.DriveTrain;
import org.usfirst.frc.team1559.robot.subsystems.DevilDrive;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc.team1559.robot.subsystems.Lifter;
import org.usfirst.frc.team1559.robot.subsystems.Stepper;
import org.usfirst.frc.team1559.robot.OperatorInterface;
import org.usfirst.frc.team1559.robot.Robot;
/**
 * Add your docs here.
 */
public class Autosequence {
	public static OperatorInterface oi;
	public static Lifter lifter;
    // Pixy and Vision Variables/Constants
	public static Pixy pixy2;
	public static Vision vision;
	public static Relay LED_Relay;
	// The distance sensors are set right and left from the perspective of the back of the robot.
	public static DistSensor distRight; 
    public static DistSensor distLeft;
    DriveTrain drive;
	private float jKx, jKy, jKr, pKx, pKy, pKr, Er, Ex;
	private double Ey, errorX, errorR, errorY;
	private int close_enough;
	private int backuptimer;
	private int scoreingcomplete;
	private int grabberon;
	private int cargodrop;
	private Grabber grabber;
	private int hatchtimer;
	private int cargodroped;
	public Autosequence(OperatorInterface joystick, DriveTrain DT, Lifter L, Grabber G)
	{
		hatchtimer = 0;
		grabberon = 0;
		backuptimer = 0;
		scoreingcomplete = 0;
		jKx = 0.012f;
		jKr = 0.025f;//0.014 
		jKy = 0.007f;//shold be .009
		pKx = -0.0125f;// maximum pixy translation (1/2 frame with)0.025
		pKr = 0.007f;// maximum pixy angle0.014
		pKy = 0.015f;//slow mode for y on pixy
		distRight = new DistSensor(new AnalogInput (0));
		distLeft = new DistSensor(new AnalogInput (2));
		vision = new Vision();
		pixy2 = new Pixy();
		oi = joystick;
		drive = DT;
		lifter = L;
		grabber = G;



	}
	
public void autodrive(){
	
		// Pixy and Vision Functions
		float Rightdistance = (float)distRight.getRange();
			float Leftdistance = (float)distLeft.getRange();
			Ey = Math.min(Leftdistance,Rightdistance)/10;
			pixylinevector v=pixy2.getvector();
		 	vision.update();
		 	VisionData vData = vision.getData();
		 	vData.Print();
		 	Ex = pixy2.getEx();
			Er = pixy2.getEr();
			// Er = Rightdistance - Leftdistance;
		

			double maxPixyRange = 18.0;
			SmartDashboard.putNumber("RightIRDistance,", Rightdistance);
			SmartDashboard.putNumber("LeftIRdistance", Leftdistance);

			if(oi.getCopilotAxis(Constants.LINEASSIST) >= 0.9)	
			{
				System.out.println("It's alive and centering on target");
				pixy2.lampon();
				vData.Print();
				if(vData.status==1)
				{
					if(vData.y >= maxPixyRange)
					{
						errorX = vData.x;

						if ((errorX > -7.0) && (errorX < 7.0))
						{
							//SmartDashboard.putNumber("__Close enough x", errorX);
							errorX = errorX/5.0;
						}

						errorR = vData.r;
						if ((errorR > -4.0) && (errorR < 4.0))
						{
							//SmartDashboard.putNumber("__Close enough r", errorR);
							errorR = errorR/5.0;
						}

						double xDrive = (jKx * errorX)*24/vData.x;

						if(xDrive > 1.0)
							xDrive = 1.0;
						else if(xDrive < -1.0)
							xDrive = -1.0;

						errorY = vData.y;
						// SmartDashboard.putNumber("ex",vData.x);
						// SmartDashboard.putNumber("ey", vData.y);
						// SmartDashboard.putNumber("er",vData.r);	
					
					
						// SmartDashboard.putNumber("__x",xDrive);
						// SmartDashboard.putNumber("__y", jKy * errorY);
						// SmartDashboard.putNumber("__r",jKr * errorR);	
						SmartDashboard.putString("Mode","jetson");
						
						drive.driveCartesian(xDrive, jKy * errorY , jKr * errorR);	
					}
					else if(v.status ==1 )
					{
					
						if (pixy2.getEx() > -0.3 && pixy2.getEx() < 0.3)
						{
							SmartDashboard.putNumber("__Close enough x", Ex);
							Ex = Ex/10;
						}
						if (pixy2.getEr() > -4 && pixy2.getEr() < 4)
						{
							SmartDashboard.putNumber("__Close enough r", Er);
							Er = Er/15; 
						}
						if(Er < -3 && Er > 3)
						{
							pKy=0.416f;//1/24 for the distance sensors max speed; 0.416
						}
						if(Ey <= 2 && Ey >= -2)
						{
							Ey = 0;
						}

					drive.driveCartesian(pKx * Ex, pKy * Ey , pKr * pixy2.getEr());	
					//to go right increase, to go left decrease
					SmartDashboard.putNumber("__x",pixy2.getEx());
					SmartDashboard.putNumber("__y", Rightdistance);
					SmartDashboard.putNumber("__r",pixy2.getEr());
					SmartDashboard.putString("Mode","pixy");
					System.out.println("Pixy " + pixy2.getEx() + " " + Rightdistance + " " + pixy2.getEr());
					}
					if(v.status == 1){
					close_enough = 1;
					}
					else if(v.status == 0){
				    close_enough = 0;
					}
				
					
					 if(close_enough == 1 && oi.getCopilotAxis(3) >=0.9 && oi.copilot.getRawButton(4)){
						lifter.isAxis = false;
						lifter.goToPortPos(1);
						scoreingcomplete = 1;
						grabberon = 1;
					}
					 if(close_enough == 1 && oi.getCopilotAxis(3) >=0.9 && oi.copilot.getRawButton(5)){
						lifter.isAxis = false;
						lifter.goToPortPos(3);
						scoreingcomplete = 1;
						grabberon = 1;
					}
					
					 if(close_enough == 1 && oi.getCopilotAxis(3) >=0.9 && oi.copilot.getRawButton(6)){
						lifter.isAxis = false;
						lifter.goToPortPos(2);
						scoreingcomplete = 1;
						grabberon = 1;
					 }
					  if(close_enough == 1 && oi.getCopilotAxis(3) <0.9 && oi.copilot.getRawButton(4)){
						lifter.isAxis = false;
						lifter.goToCargoShipHatch();
						scoreingcomplete = 1;
						hatchtimer = 1;
					}
					 if(close_enough == 1 && oi.getCopilotAxis(3) <0.9 && oi.copilot.getRawButton(5)){
						lifter.isAxis = false;
						lifter.goToHatchPos(3);
						scoreingcomplete = 1;
						hatchtimer = 1;
					}
					 if(close_enough == 1 && oi.getCopilotAxis(3) <0.9 && oi.copilot.getRawButton(6)){
						lifter.isAxis = false;
						lifter.goToCargoShipCargoDrop();
						scoreingcomplete = 1;
						hatchtimer = 1;
					}
				
				}
					if(grabberon == 1){
					cargodrop = 1;	
					}
			
					if(cargodrop>=1 && cargodrop <=7){
						cargodrop = cargodrop + 1;
						grabber.removeCargo();
						}
					    if(cargodrop >= 7){
						grabber.StopBall(); 
						cargodrop = 0;  
						}
						if(hatchtimer >= 1 && hatchtimer <= 9){
							hatchtimer = hatchtimer + 1;
							drive.driveCartesian(0, -0.3, 0);
						}
						if(hatchtimer>=9){
							hatchtimer = 0;
							backuptimer = 1;
						}
						if(scoreingcomplete == 1 && cargodroped == 1){
							backuptimer = 1;
						}
						if (backuptimer >=1 && backuptimer <=20){
							backuptimer = backuptimer + 1;
							drive.driveCartesian(0, -0.3, 0);
						}
						if(backuptimer >= 20){
							backuptimer = 0;
							cargodroped = 0;
							lifter.goToBottom(1);;
						}
				else
				{
					SmartDashboard.putString("Mode","driver-2");
					// SmartDashboard.putNumber("__x",oi.getPilotX());
					// SmartDashboard.putNumber("__y",oi.getPilotY());
					// SmartDashboard.putNumber("__r",oi.getPilotZ());
					drive.driveCartesian(oi.getPilotX(), oi.getPilotY(), oi.getPilotZ());
				}
			}
		
				else{
					SmartDashboard.putString("Mode","driver-2");
					// SmartDashboard.putNumber("__x",oi.getPilotX());
					// SmartDashboard.putNumber("__y",oi.getPilotY());
					// SmartDashboard.putNumber("__r",oi.getPilotZ());
					drive.driveCartesian(oi.getPilotX(), oi.getPilotY(), oi.getPilotZ());
				}
				
		}
}